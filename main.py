
import os
import platform
import time
import json

"""
M√≥dulo de gerenciamento de sistema acad√™mico.

Este m√≥dulo implementa um menu de gerenciamento de entidades do sistema acad√™mico, permitindo que
usu√°rios possam incluir, listar, atualizar e excluir dados de entidades como estudantes, professores,
disciplinas, turmas e matr√≠culas.

@autor: Cleber de Moraes Goncalves üòä‚ú®
"""

# ===================== INFRAESTRUTURA ===================== #

def limpar_console() -> None:
    """
    Limpa o console para melhorar a experi√™ncia do usu√°rio.

    Funciona tanto no Windows quanto no Linux/macOS.
    """
    sistema_operacional = platform.system()
    
    if sistema_operacional == "Windows":
        os.system('cls')  # Comando para limpar o console no Windows
    else:
        os.system('clear')  # Comando para limpar o console no Linux/macOS

def imprimir_cabecalho(titulo: str) -> None:
    """
    Imprime um cabe√ßalho estiloso formatado com base no t√≠tulo passado.

    @param {str} titulo - O t√≠tulo a ser exibido no cabe√ßalho.
    """
    print(f"####### {titulo.upper()} ######")


# ===================== GERENCIAMENTO DE DADOS ===================== #

DADOS_PATH = 'dados.json'

def carregar_dados() -> dict:
    """
    Carrega os dados do arquivo JSON.

    @return {dict} Um dicion√°rio com os dados carregados.
    """
    if not os.path.exists(DADOS_PATH):
        return {entidade: [] for entidade in entidades.values()}
    
    with open(DADOS_PATH, 'r') as arquivo:
        return json.load(arquivo)

def salvar_dados(dados: dict) -> None:
    """
    Salva os dados no arquivo JSON.

    @param {dict} dados - Um dicion√°rio com os dados a serem salvos.
    """
    with open(DADOS_PATH, 'w') as arquivo:
        json.dump(dados, arquivo, indent=4)

# ======================== DOM√çNIO ======================== #

# Dicion√°rio para mapear op√ß√µes do menu principal com suas entidades
entidades = {
    '1': 'estudantes',
    '2': 'professores',
    '3': 'disciplinas',
    '4': 'turmas',
    '5': 'matr√≠culas'
}

# Dicion√°rio para mapear op√ß√µes do menu de opera√ß√µes com suas a√ß√µes
acoes = {
    '1': 'Incluir',
    '2': 'Listar',
    '3': 'Atualizar',
    '4': 'Excluir'
}


# ===================== APLICA√á√ÉO ===================== #

def menu_principal() -> None:
    """
    Exibe o menu principal com as op√ß√µes de entidades e permite que o usu√°rio
    selecione qual entidade deseja gerenciar.

    Caso o usu√°rio escolha uma op√ß√£o v√°lida, o menu de opera√ß√µes para a entidade ser√° chamado.
    O menu √© exibido em loop at√© que o usu√°rio escolha a op√ß√£o de sair.
    """
    while True:
        limpar_console()  # Limpa o console antes de exibir o menu principal
        imprimir_cabecalho("menu principal")  # Exibe o cabe√ßalho do menu principal

        # Exibe as op√ß√µes dispon√≠veis no menu principal
        for key, entidade in entidades.items():
            print(f"({key}) Gerenciar {entidade}.")
        print("(0) Sair.")
        
        # Recebe a op√ß√£o escolhida pelo usu√°rio
        opcao = input("Informe a op√ß√£o desejada: ")
        
        # Verifica a op√ß√£o escolhida e executa a a√ß√£o correspondente
        if opcao == '0':
            limpar_console()  # Limpa o console antes de exibir o menu principal
            print("Finalizando aplica√ß√£o...")
            time.sleep(1)  # Delay de 1 segundos
            break
        elif opcao in entidades:
            # Chama o menu de opera√ß√µes para a entidade selecionada
            menu_operacoes(entidades[opcao])
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")


def menu_operacoes(entidade: str) -> None:
    """
    Exibe o menu de opera√ß√µes para a entidade selecionada, permitindo que o usu√°rio
    escolha a a√ß√£o que deseja realizar (Incluir, Listar, Atualizar, Excluir).

    @param {str} entidade - Nome da entidade selecionada no menu principal.
    """
    while True:
        limpar_console()  # Limpa o console antes de exibir o menu principal
        imprimir_cabecalho(f"menu de opera√ß√µes - {entidade}")  # Exibe o cabe√ßalho do menu de opera√ß√µes

        # Exibe as a√ß√µes dispon√≠veis no menu de opera√ß√µes
        for key, acao in acoes.items():
            print(f"({key}) {acao}.")
        print("(0) Voltar ao menu principal.")
        
        # Recebe a a√ß√£o escolhida pelo usu√°rio
        opcao = input("Informe a a√ß√£o desejada: ")
        
        # Verifica a a√ß√£o escolhida e executa a a√ß√£o correspondente
        if opcao == '0':
            limpar_console()  # Limpa o console antes de exibir o menu principal
            print("Voltando ao menu principal...")
            time.sleep(1)  # Delay de 1 segundos
            break
        elif opcao in acoes:
            executar_acao(entidade, opcao)
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")


def executar_acao(entidade: str, opcao: str) -> None:
    """
    Executa a a√ß√£o escolhida pelo usu√°rio para a entidade selecionada.

    @param {str} entidade - Nome da entidade para a qual a a√ß√£o ser√° realizada.
    @param {str} opcao - A a√ß√£o selecionada (Incluir, Listar, Atualizar, Excluir).
    """
    dados = carregar_dados()
    if opcao == '1':  # Incluir
        novo_item = input(f"Informe os dados do novo {entidade[:-1]}: ")
        dados[entidade].append(novo_item)
        salvar_dados(dados)
        print(f"{entidade[:-1].capitalize()} inclu√≠do com sucesso!")
    elif opcao == '2':  # Listar
        if not dados[entidade]:
            print(f"N√£o h√° {entidade} cadastrados.")
        else:
            print(f"Lista de {entidade}:")
            for idx, item in enumerate(dados[entidade], start=1):
                print(f"{idx}. {item}")
    elif opcao == '3':  # Atualizar
        if not dados[entidade]:
            print(f"N√£o h√° {entidade} cadastrados.")
        else:
            for idx, item in enumerate(dados[entidade], start=1):
                print(f"{idx}. {item}")
            indice = int(input("Informe o n√∫mero do item que deseja atualizar: ")) - 1
            if 0 <= indice < len(dados[entidade]):
                novo_valor = input(f"Informe o novo valor para {entidade[:-1]}: ")
                dados[entidade][indice] = novo_valor
                salvar_dados(dados)
                print(f"{entidade[:-1].capitalize()} atualizado com sucesso!")
            else:
                print("√çndice inv√°lido.")
    elif opcao == '4':  # Excluir
        if not dados[entidade]:
            print(f"N√£o h√° {entidade} cadastrados.")
        else:
            for idx, item in enumerate(dados[entidade], start=1):
                print(f"{idx}. {item}")
            indice = int(input("Informe o n√∫mero do item que deseja excluir: ")) - 1
            if 0 <= indice < len(dados[entidade]):
                dados[entidade].pop(indice)
                salvar_dados(dados)
                print(f"{entidade[:-1].capitalize()} exclu√≠do com sucesso!")
            else:
                print("√çndice inv√°lido.")
    
    input("\nPressione enter para continuar...")

# ===================== INICIALIZA√á√ÉO ===================== #

if __name__ == "__main__":
    """
    Ponto de entrada da aplica√ß√£o.
    
    Inicia a exibi√ß√£o do menu principal e aguarda a intera√ß√£o do usu√°rio.
    """
    menu_principal()
